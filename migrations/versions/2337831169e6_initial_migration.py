"""Initial migration

Revision ID: 2337831169e6
Revises: 
Create Date: 2024-09-16 02:49:57.191013

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2337831169e6'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('service')
    op.drop_table('booking')
    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_organic', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('category', sa.String(length=50), nullable=False))
        batch_op.add_column(sa.Column('image_url', sa.String(length=200), nullable=True))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))

    with op.batch_alter_table('subscription', schema=None) as batch_op:
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               existing_nullable=False)
        batch_op.create_unique_constraint(None, ['name'])

    with op.batch_alter_table('transaction', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('date', sa.DateTime(), nullable=False))
        batch_op.add_column(sa.Column('type', sa.String(length=20), nullable=False))
        batch_op.drop_constraint('transaction_buyer_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('transaction_product_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])
        batch_op.drop_column('product_id')
        batch_op.drop_column('timestamp')
        batch_op.drop_column('buyer_id')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('password_hash', sa.String(length=128), nullable=True))
        batch_op.add_column(sa.Column('subscription_tier', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('subscription_start_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('subscription_end_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('last_payment_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('mrr', sa.Float(), nullable=True))
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=80),
               type_=sa.String(length=64),
               nullable=True)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               nullable=True)
        batch_op.alter_column('user_type',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
        batch_op.drop_constraint('user_email_key', type_='unique')
        batch_op.drop_constraint('user_username_key', type_='unique')
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_username'), ['username'], unique=True)
        batch_op.drop_column('password')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
        batch_op.drop_index(batch_op.f('ix_user_username'))
        batch_op.drop_index(batch_op.f('ix_user_email'))
        batch_op.create_unique_constraint('user_username_key', ['username'])
        batch_op.create_unique_constraint('user_email_key', ['email'])
        batch_op.alter_column('user_type',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               nullable=False)
        batch_op.alter_column('username',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=80),
               nullable=False)
        batch_op.drop_column('mrr')
        batch_op.drop_column('last_payment_date')
        batch_op.drop_column('subscription_end_date')
        batch_op.drop_column('subscription_start_date')
        batch_op.drop_column('subscription_tier')
        batch_op.drop_column('password_hash')

    with op.batch_alter_table('transaction', schema=None) as batch_op:
        batch_op.add_column(sa.Column('buyer_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('transaction_product_id_fkey', 'product', ['product_id'], ['id'])
        batch_op.create_foreign_key('transaction_buyer_id_fkey', 'user', ['buyer_id'], ['id'])
        batch_op.drop_column('type')
        batch_op.drop_column('date')
        batch_op.drop_column('user_id')

    with op.batch_alter_table('subscription', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('name',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)

    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.drop_column('created_at')
        batch_op.drop_column('image_url')
        batch_op.drop_column('category')
        batch_op.drop_column('is_organic')

    op.create_table('booking',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('vendor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('booking_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['service_id'], ['service.id'], name='booking_service_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='booking_user_id_fkey'),
    sa.ForeignKeyConstraint(['vendor_id'], ['user.id'], name='booking_vendor_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='booking_pkey')
    )
    op.create_table('service',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('vendor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['vendor_id'], ['user.id'], name='service_vendor_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='service_pkey')
    )
    # ### end Alembic commands ###
