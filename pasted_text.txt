let map;
let produceHeatmap;
let climateHeatmap;

function initMap() {
    console.log('Initializing map');
    map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: 40.7128, lng: -74.0060 }, // Default to New York City
        zoom: 10,
    });

    // Fetch produce data from the server
    fetch('/api/produce_data')
        .then(response => response.json())
        .then(data => {
            addMarkers(data);
            addProduceHeatMap(data);
        })
        .catch(error => console.error('Error fetching produce data:', error));

    // Add climate and planting zones heat map
    addClimateHeatmap();
}

function addMarkers(locations) {
    locations.forEach(location => {
        const marker = new google.maps.Marker({
            position: { lat: location.lat, lng: location.lng },
            map: map,
            title: location.name,
        });

        const infoWindow = new google.maps.InfoWindow({
            content: `
                <h3>${location.name}</h3>
                <p>Price: $${location.price}</p>
                <p>Organic: ${location.organic ? 'Yes' : 'No'}</p>
            `
        });

        marker.addListener('click', () => {
            infoWindow.open(map, marker);
        });
    });
}

function addProduceHeatMap(locations) {
    console.log('Adding produce heatmap');
    const heatmapData = locations.map(location => ({
        location: new google.maps.LatLng(location.lat, location.lng),
        weight: location.organic ? 0.8 : 0.5, // Higher weight for organic produce
    }));

    produceHeatmap = new google.maps.visualization.HeatmapLayer({
        data: heatmapData,
        map: map,
    });
    console.log('Produce heatmap added to map');
}

function addClimateHeatmap() {
    console.log('Adding climate heatmap');
    fetch('/api/climate_zones')
        .then(response => response.json())
        .then(data => {
            console.log('Climate zone data received:', data);
            const climateData = data.map(zone => ({
                location: new google.maps.LatLng(zone.lat, zone.lng),
                weight: zone.weight
            }));

            climateHeatmap = new google.maps.visualization.HeatmapLayer({
                data: climateData,
                map: map, // Initially visible
                gradient: getClimateGradient(),
                radius: 20,
                opacity: 0.7
            });
            console.log('Climate heatmap initialized and added to map');
        })
        .catch(error => {
            console.error('Error fetching climate zone data:', error);
        });
}

function getClimateGradient() {
    return [
        'rgba(0, 255, 0, 0)',   // Transparent green
        'rgba(0, 255, 0, 1)',   // Solid green
        'rgba(255, 255, 0, 1)', // Yellow
        'rgba(255, 128, 0, 1)', // Orange
        'rgba(255, 0, 0, 1)'    // Red
    ];
}

function toggleProduceHeatmap() {
    console.log('Toggling produce heatmap');
    if (produceHeatmap) {
        produceHeatmap.setMap(produceHeatmap.getMap() ? null : map);
        console.log('Produce heatmap visibility:', produceHeatmap.getMap() ? 'visible' : 'hidden');
    } else {
        console.error('Produce heatmap not initialized');
    }
}

function toggleClimateHeatmap() {
    console.log('Toggling climate heatmap');
    if (climateHeatmap) {
        climateHeatmap.setMap(climateHeatmap.getMap() ? null : map);
        console.log('Climate heatmap visibility:', climateHeatmap.getMap() ? 'visible' : 'hidden');
    } else {
        console.error('Climate heatmap not initialized');
    }
}

function changeRadius() {
    if (produceHeatmap) {
        const newRadius = produceHeatmap.get("radius") ? null : 20;
        console.log('Changing heatmap radius to:', newRadius);
        produceHeatmap.set("radius", newRadius);
    } else {
        console.error('Produce heatmap not initialized');
    }
}

function changeGradient() {
    if (produceHeatmap) {
        const newGradient = produceHeatmap.get("gradient") ? null : [
            "rgba(0, 255, 255, 0)",
            "rgba(0, 255, 255, 1)",
            "rgba(0, 191, 255, 1)",
            "rgba(0, 127, 255, 1)",
            "rgba(0, 63, 255, 1)",
            "rgba(0, 0, 255, 1)",
            "rgba(0, 0, 223, 1)",
            "rgba(0, 0, 191, 1)",
            "rgba(0, 0, 159, 1)",
            "rgba(0, 0, 127, 1)",
            "rgba(63, 0, 91, 1)",
            "rgba(127, 0, 63, 1)",
            "rgba(191, 0, 31, 1)",
            "rgba(255, 0, 0, 1)"
        ];
        console.log('Changing heatmap gradient');
        produceHeatmap.set("gradient", newGradient);
    } else {
        console.error('Produce heatmap not initialized');
    }
}

// Initialize the map when the page loads
window.onload = initMap;